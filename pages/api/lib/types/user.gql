
  # Users
  type User {
    id: ID
    # idComp: ID 
    idRoles: ID
    lastCompany: String
    firstName: String
    lastName: String
    userName:String
    uEmail: String
    uAvatar: String
    uAddress: String
    uPhone: Int
    landLine: Int
    uPassword: String
    uBirthday: String
    lat: Int
    long: Int
    iP: Int
    # Get Company
    company: [Company]
    bill: [Bill]
    # Roles
  }
  # Token
type Token {
  token: String
}

  # Login user
input LoginInput {
  email: String!
  password: String!
}
  input IUser {
    lastCompany: String
    firstName: String
    lastName: String
    uAvatar: String
    userName: String
    uEmail: String
    uAddress: String
    uPhone: Int
    landLine: Int
    uPassword: String
    uBirthday: String
    lat: Int
    long: Int
    iP: Int
    step: Int
    currentPassword: String 
    newPassword: String 
  }
  input IResetPassword {
    uEmail: String
    uPassword: String
    uToken: String 
  }

  type Query {
"""Response for find one User"""
    getUser(id: ID, userName: String): User

  }

"""Response for user login"""
type AuthPayload {
    user: User
    token: String
    admin: Boolean
    success: Boolean
    message: String
    userId: ID!
    refreshToken: String,
    newRefreshToken: String
}
  type Mutation {
    """"registra user data"""
    newRegisterUser(userName: String!, uEmail: String!, uPassword: String! uAvatar: String): AuthPayload!

  }
